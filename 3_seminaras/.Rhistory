sales <- data.frame(row.names = month.abb[1:12],
Marry = sample(1:12, 12, replace=TRUE),
John = sample(1:12,12, replace = TRUE),
Felix =sample(1:12,12, replace=TRUE),
Jenny = sample(1:12,12, replace=TRUE))
sales
apply(sales, MARGIN = 1, sum)
apply(sales, MARGIN = 2, sum)
plot(apply(sales, MARGIN = 1, sum))
plot(apply(sales, MARGIN = 1, sum), type="l")
set.seed(101)
sales <- data.frame(row.names = month.abb[1:12],
Marry = sample(1:12, 12, replace=TRUE),
John = sample(1:12,12, replace = TRUE),
Felix =sample(1:12,12, replace=TRUE),
Jenny = sample(1:12,12, replace=TRUE))
plot(apply(sales, MARGIN = 1, sum), type="l")
?plot
plot(apply(sales, MARGIN = 1, sum), type="b")
?barplot
barplot(apply(sales, MARGIN = 2, sum))
?boxplot
boxplot(apply(sales, MARGIN = 2, sum))
boxplot(sales)
apply(sales, 2, quantile, probs=c(0,0.25,0.5,0.75,1))
apply(sales, 2, summary, digits=0)
rep(c("a", "b"), c(1,3))
sales_mean <- apply(sales, 2, mean)
df1 <- sweep(sales, 2, sales_mean, "-")
df2 <- sweep(df1, 2, sales_sd, "/")
sales_sd <- apply(sales, 2, sd)
df1 <- sweep(sales, 2, sales_mean, "-")
df2 <- sweep(df1, 2, sales_sd, "/")
sales_mean <- apply(sales, 2, mean)
boxplot(df2)
A <- matrix(sample(1:10,9),3,3)
B <- matrix(sample(1:10,9),3,3)
C <- matrix(sample(1:10,9),3,3)
MAT_LIST <- lis(A,B,C)
MAT_LIST <- list(A,B,C)
lapply(MAT_LIST, "[", ,1)
MAT_LIST <- list(A,B,C)
lapply(MAT_LIST, "[", ,1)
lapply(sales, 2, sum)
lapply(sales, , sum)
lapply(sales, sum)
sapply(sales, sum)
rnorm(n, mean, sd)
noise <- function (n, mean, sd) {
rnorm(n, mean, sd)
}
noise(4,1,2)
mapply(noise, 1:4, 1:4, 0.1)
matrix(nrow = 4, ncol=4)
matrix(nrow = 4, ncol=4, 1:4)
mapply(rep(1:4), 4:4)
mapply(rp(1:4), 4:4)
mapply(rep(1:4), 4:4)
mapply(rep(1:4), 4:4)
mapply(rep(1:4), 4)
mapply(rep, 1:4, 4)
rapply(sales, mean(sales)sales*0.15)
rapply(sales, function(sales) sales*0.15)
sapply(rapply(sales, function(sales) sales*0.15))
rapply(sales, function(sales) sales_mean*0.15))
rapply(sales, function(sales) mean(sales)*0.15)
rapply(sapply(sales_mean), function(sales) sales*0.15)
rapply(sapply(sales,mean), function(sales) sales*0.15)
rapply(lapply(sales,mean), function(sales) sales*0.15)
head(airquality)
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x[,1:4]))
sapply(s, function(x) colMeans(x[,1:4], na.rm=TRUE))
set.seed(1)
rnorm(n=5, mean=5, sd=2)
dbinom(x=4, size=10, prob = 0.25)
x <- seq(from=0, to=10, by=1)
y <- dbinom(x, size=10, prob=0.25)
plot(x,y,type = "p")
sales<-data.frame(row.names=month.abb[1:12,]
Marry=sample(0:100,12,replace=TRUE),
John=sample(100:200,12replace=TRUE),
Felix=sample(150:300,12,replace=TRUE),
Jenny=sample(0:400,12,replace=TRUE))
sales <- data.frame(row.names=month.abb[1:12,]
Marry=sample(0:100,12,replace=TRUE),
John=sample(100:200,12replace=TRUE),
Felix=sample(150:300,12,replace=TRUE),
Jenny=sample(0:400,12,replace=TRUE))
set.seed(101)
sales <- data.frame(row.names=month.abb[1:12,]
Marry=sample(0:100,12,replace=TRUE),
John=sample(100:200,12replace=TRUE),
Felix=sample(150:300,12,replace=TRUE),
Jenny=sample(0:400,12,replace=TRUE))
sales <- data.frame(row.names=month.abb[1:12],
Marry=sample(0:100,12,replace=TRUE),
John=sample(100:200,12replace=TRUE),
Felix=sample(150:300,12,replace=TRUE),
Jenny=sample(0:400,12,replace=TRUE))
sales <- data.frame(row.names=month.abb[1:12],
Marry=sample(0:100,12,replace=TRUE),
John=sample(100:200,12,replace=TRUE),
Felix=sample(150:300,12,replace=TRUE),
Jenny=sample(0:400,12,replace=TRUE))
set.seed(101)
sales <- data.frame(row.names=month.abb[1:12],
Marry=sample(0:100,12,replace=TRUE),
John=sample(100:200,12,replace=TRUE),
Felix=sample(150:300,12,replace=TRUE),
Jenny=sample(0:400,12,replace=TRUE))
sales
apply(sales,2,sum)
apply(sales,1,sum)
?par
?plot
?plot
plot(sales)
?plot
apply(sales,1,sum)
x <-apply(sales,1,sum)
plot(x)
?plot
plot(x,type=lines)
plot(x,type=l)
plot(x,type=l)
x <-apply(sales,1,sum)
plot(x,type=l)
?plot
plot(x,type="b")
?hist
hist(x)
y <- apply(sales,2,sum)
hist(y)
?barplot
barplot(y)
?boxplot
boxplot(y)
?boxplot
boxplot(y)
boxplot(sales)
sales_mean <- apply(sales,2,mean)
sales_sd <- apply(sales,2,sd)
df1 <- sweep(sales,2,sales-mean,fun="-")
sales_mean <- apply(sales,2,mean)
sales_sd <- apply(sales,2,sd)
df1 <- sweep(sales,2,sales-mean,FUN="-")
df1 <- sweep(sales,2,sales-mean,"-")
df1 <- sweep(sales,2,sales_mean,"-")
df2 <- sweep(df1,2,sales_sd, "/")
par(mfrow=c(1,2))
boxplot(sales)
bosplot(d2)
boxplot(df2)
?lapply
lapply(sales,"[", ,1)
lapply(sales,"/", ,1)
lapply(sales,"[", ,1)
lapply(sales,sum, ,1)
lapply(sales,sum)
sapply(sales,sum)
mapply(matrix(1:5))
mapply(matrix[1:5])
mapply(matrix(nrow = 5,ncol = 5))
mapply(matrix(nrow = 5,ncol = 5))
mapply(matrix,1:5,5)
mapply(1:5,5)
mapply(1:5)
mapply(1:5,1:5)
mapply(rep,1:5)
mapply(rep,1:5,5)
rapply(sales, apply(sales,2,mean,),*0.15)
rapply(sales, apply(x <- sales,2,mean,){x*0.15})
rapply(sales, apply(x <- sales,2,mean){x*0.15})
apply(x <- sales,2,mean)
x <-
rapply(sales, apply(x <- sales,2,mean){x*0.15})
x <- apply(x <- sales,2,mean)
z <- apply(x <- sales,2,mean)
rapply(sales, z,{z*0.15})
z <- sapply(x <- sales,2,mean)
z <- lapply(sales,mean)
rapply(sales, z,{z*0.15})
z <- lapply(sales,mean)
z
rapply(sales, z,z*0.15)
rapply(lapply(sales,mean), function(z),z*0.15)
rm(z)
rapply(lapply(sales,mean), function(z),z*0.15)
rapply(lapply(sales,mean), function(z)z*0.15)
head(airquality)
s <- split(airquality,airquality$Month)
lapply(s, function(t) colMeans(t))
lapply(s, function(x) colMeans(x))
lapply(s, function(x) colMeans(x),rm.na=FALSE)
lapply(s, function(x) colMeans(x),rm.na=TRUE)
lapply(s, function(x) colMeans(x),rm.na=0)
s <- split(airquality,airquality$Month)
lapply(s[ ,5], function(x) colMeans(x))
lapply(s[5,5], function(x) colMeans(x))
lapply(s[ ,1:4], function(x) colMeans(x))
lapply(s, function(x) colMeans(x[1:4],na.rm=TRUE))
lapply(s, function(x) colMeans(x[,1:4],na.rm=TRUE))
data.table <- read.csv("C:/Users/studentas/Desktop/data-table.csv")
View(data.table)
setwd('C:/Users/studentas/Desktop')
srt(data.table)
str(data.table)
dir()
rm(data.table)
data.table <- read.csv("C:/Users/studentas/Desktop/data-table.csv")
rm(data.table)
data.table <- read.csv("data-table.csv",sep=",",header = TRUE,stringsAsFactors = FALSE)
View(data.table)
install.packages("readr")
library(readr)
data.table <- read_csv("data-table.csv",sep=",",header = TRUE,stringsAsFactors = FALSE, encouding="UTF-8")
data.table <- read.csv("data-table.csv",sep=",",header = TRUE,stringsAsFactors = FALSE, encouding="UTF-8")
Rm(data.table)
rm(data.table)
data <- read.csv("data-table.csv",sep=",",header = TRUE,stringsAsFactors = FALSE, encouding="UTF-8")
data <- read.csv("data-table.csv",sep=",",header = TRUE,stringsAsFactors = FALSE, encouding="UTF-8")
data <- read.csv("data-table.csv",sep=",",header = TRUE,stringsAsFactors = FALSE, encoding="UTF-8")
View(data)
str(data)
df <- data[data$Lytis=="Vyras ir moteris", & data$Gyvenamoji.vietove=="Miestas ir kaimas"&data$Amžius..tikslines.amžiaus.grupes. %in% c("15-24","15-74"), ]
df <- data[data$Lytis=="Vyrai ir moterys", & data$Gyvenamoji.vietove=="Miestas ir kaimas"&data$Amžius..tikslines.amžiaus.grupes. %in% c("15-24","15-74"), ]
df <- data[data$Lytis=="Vyrai ir moterys", & data$Gyvenamoji.vietove=="Miestas ir kaimas" & data$Amžius..tikslines.amžiaus.grupes. %in% c("15-24","15-74"), ]
df <- data[data$Lytis=="Vyrai ir moterys" & data$Gyvenamoji.vietove=="Miestas ir kaimas" & data$Amžius..tikslines.amžiaus.grupes. %in% c("15-24","15-74"), ]
df <- data[data$Lytis=="Vyrai ir moterys" & data$Gyvenamoji.vietove=="Miestas ir kaimas"]
df <- data[data$Lytis=="Vyrai ir moterys" & data$Gyvenamoji.vietove=="Miestas ir kaimas",]
View(data)
View(df)
aggregate(df$Reikšme, list(df$Amžius..tikslines.amžiaus.grupes.), mean)
df <- data[data$Lytis=="Vyrai ir moerys"&data$Gyvenamoji.vietove=="Miestas ir kaimas"&data$Amžius..tikslines.amžiaus.grupes.%in% c("15-24". "15-74"),]
df <- data[data$Lytis=="Vyrai ir moerys"&data$Gyvenamoji.vietove=="Miestas ir kaimas"&data$Amžius..tikslines.amžiaus.grupes.%in% c("15-24", "15-74"),]
df <- data[data$Lytis=="Vyrai ir moterys"&data$Gyvenamoji.vietove=="Miestas ir kaimas"&data$Amžius..tikslines.amžiaus.grupes.%in% c("15-24", "15-74"),]
df <- data[data$Lytis=="Vyrai ir moterys"& data$Gyvenamoji.vietove=="Miestas ir kaimas"& data$Amžius..tikslines.amžiaus.grupes. %in% c("15-24", "15-74"),]
df <- data[data$Lytis=="Vyrai ir moterys"&data$Gyvenamoji.vietove=="Miestas ir kaimas"&data$Amžius..tikslines.amžiaus.grupes. %in% c("15-24", "15-74"),]
dc <- data[data$Lytis=="Vyrai ir moterys"
dc <- data[data$Lytis=="Vyrai ir moterys",]
dc <- data[data$Lytis=="Vyrai ir moterys",]
rm(dc)
dc <- data[data$Gyvenamoji.vietove=="Miestas ir kaimas",]
rm(dc)
df <- data[data$Lytis=="Vyrai ir moterys"&data$Gyvenamoji.vietove=="Miestas ir kaimas"&data$Amžius..tikslines.amžiaus.grupes. %in% c("15-24", "15-74"),]
df <- data[data$Lytis=="Vyrai ir moterys"&data$Gyvenamoji.vietove=="Miestas ir kaimas"&data$Amžius..tikslines.amžiaus.grupes. %in% c("15-24", "15-74"),]
df <- data[data$Lytis=="Vyrai ir moterys"&data$Gyvenamoji.vietove=="Miestas ir kaimas"&data$Amžius..tikslines.amžiaus.grupes. %in% c("15–24", "15–74"),]
plot(df[df[,3]=="15–24",1])
plot(df[df[,3]=="15–24",1],
df[df[,3]=="15–24"],7])
plot(df[df[,3]=="15–24",1],
df[df[,3]=="15–24"],7)
plot(df[df[,3]=="15–24",1],
df[df[,3]=="15–24",7])
plot(df[df[,3]=="15–24",1],
df[df[,3]=="15–24",7],
type="1",
col="red")
plot(df[df[,3]=="15–24",1],
df[df[,3]=="15–24",7],
type="l",
col="red")
plot(df[df[,3]=="15–24",1],
df[df[,3]=="15–24",7],
type="l",
col="red",
ylim=c(0,40),
xlab = "Metai",
ylab = "Nedarbo lygis, %")
plot(df[df[,3]=="15–74",1],
df[df[,3]=="15–74",1],
type = "l",
col="blue",
ylim=c(0,40),
xlab = "Metai",
ylab = "Nedarbo lygis,%")
plot(df[df[,3]=="15–74",1],
df[df[,3]=="15–74",1],
type = "l",
col="blue",
ylim=c(0,40),
xlab = "Metai",
ylab = "Nedarbo lygis,%")
plot(df[df[,3]=="15–74",1],
df[df[,3]=="15–74",1],
type ="l",
col="blue",
ylim=c(0,40),
xlab = "Metai",
ylab = "Nedarbo lygis,%")
plot(df[df[,3]=="15–24",1],
df[df[,3]=="15–24",7],
type="l",
col="red",
ylim=c(0,40),
xlab = "Metai",
ylab = "Nedarbo lygis, %")
plot(df[df[,3]=="15–74",1],
df[df[,3]=="15–74",1],
type ="l",
col="blue",
ylim=c(0,40),
xlab = "Metai",
ylab = "Nedarbo lygis,%")
plot2(df[df[,3]=="15–74",1],
df[df[,3]=="15–74",1],
type ="l",
col="blue",
ylim=c(0,40),
xlab = "Metai",
ylab = "Nedarbo lygis,%")
plot(df[df[,3]=="15–74",1],
df[df[,3]=="15–74",1],
type ="l",
col="blue",
ylim=c(0,40),
xlab = "Metai",
ylab = "Nedarbo lygis,%")
plot(df[df[,3]=="15–74",1],
df[df[,3]=="15–74",1],
type ="l",
col="rainbow",
ylim=c(0,40),
xlab = "Metai",
ylab = "Nedarbo lygis,%")
plot(df[df[,3]=="15–74",1],
df[df[,3]=="15–74",1],
type ="l",
col="red",
ylim=c(0,40),
xlab = "Metai",
ylab = "Nedarbo lygis,%")
plot(df[df[,3]=="15–24",1],
df[df[,3]=="15–24",7],
type="l",
col="red",
ylim=c(0,40),
xlab = "Metai",
ylab = "Nedarbo lygis, %")
lines(df[df[,3]=="15–74",1],
df[df[,3]=="15–74",7],
col="blue")
png("Nedarbo_lygio_statistika.png")
dev.off()
png("Nedarbo_lygio_statistika.png")
plot(df[df[,3]=="15–24",1],
df[df[,3]=="15–24",7],
type="l",
col="red",
ylim=c(0,40),
xlab = "Metai",
ylab = "Nedarbo lygis, %")
lines(df[df[,3]=="15–74",1],
df[df[,3]=="15–74",7],
col="blue")
dev.off()
png("Nedarbo_lygio_statistika.png",width = 960,height = 480, units = "px", pointsize = 12,)
plot(df[df[,3]=="15–24",1],
df[df[,3]=="15–24",7],
type="l",
col="red",
ylim=c(0,40),
xlab = "Metai",
ylab = "Nedarbo lygis, %")
lines(df[df[,3]=="15–74",1],
df[df[,3]=="15–74",7],
col="blue")
dev.off()
setwd("C:/Users/studentas/Desktop/3_seminaras/")
getwd()
dir()
df <- read.csv("outcome-of-care-measures.csv",
stringsAsFactors = FALSE)
View(data)
View(df)
str(df)
df <- read.csv("outcome-of-care-measures.csv",
stringsAsFactors = FALSE,
na.strings = "Not Available")
str(df)
View(df)
best <- function(state,outcome){
df <- read.csv("outcome-of-care-measures.csv",
stringsAsFactors = FALSE,
na.strings = "Not Available")
if(!state %in% unique(df$State)){
stop("invalid state")}
if(!outcome%in% c("heart attack","heart failure ", "pneumonia"){stop("invalid outcome")})
if(!outcome%in% c("heart attack","heart failure","pneumonia"){stop("invalid outcome")
})
best <- function(state,outcome){
df <- read.csv("outcome-of-care-measures.csv",
stringsAsFactors = FALSE,
na.strings = "Not Available")
if(!state %in% unique(df$State)){
stop("invalid state")}
if(!outcome%in% c("heart attack","heart failure","pneumonia"){stop("invalid outcome")
})
}
best <- function(state,outcome){
df <- read.csv("outcome-of-care-measures.csv",
stringsAsFactors = FALSE,
na.strings = "Not Available")
if(!state %in% unique(df$State)){
stop("invalid state")}
if(!outcome%in% c("heart attack","heart failure","pneumonia"){stop("invalid outcome")
})
}}
best <- function(state,outcome)
str(df)
if(!outcome%in% c("heart attack","heart failure","pneumonia")){stop("invalid outcome")}
outcome <- "heart"
outcome <- "heart attack"
if(!outcome%in% c("heart attack",
"heart failure",
"pneumonia")){stop("invalid outcome")}
if(!outcome%in% c("heart attack",
"heart failure",
"pneumonia")){stop("invalid state")}
best <- function(state,outcome)
if(!state %in% unique(df$State)){
stop("invalid state")}
if(!outcome%in% c("heart attack",
"heart failure",
"pneumonia")){stop("invalid outcome")}
if(outcome=="heart attck"){
df <- df[,c(2,7,11)]
}else if(outcome=="heart failure"){
df <- df[,c(2,7,17)]
}else{
df <- df[,c(2,7,23)]}
df <- df[!is.na(df[,3]),]
df <- df[!is.na(df[,3]),]
outcome <- "heart"
df <- df[,c(2,7,11)]
df <- df[!is.na(df[,3]),]
df <- df[!is.na(df[,3]),]
df <- df[df[,2]==state,]
best <- function(State,outcome)
if(!state %in% unique(df$State)){
stop("invalid state")}
if(!outcome%in% c("heart attack",
"heart failure",
"pneumonia")){stop("invalid outcome")}
if(outcome=="heart attck"){
df <- df[,c(2,7,11)]
}else if(outcome=="heart failure"){
df <- df[,c(2,7,17)]
}else{
df <- df[,c(2,7,23)]}
df <- df[!is.na(df[,3]),]
df <- df[df[,2]==State,]
df <- df[order(df[,3],df[,1]),]
best <- function(State,outcome){
if(!state %in% unique(df$State)){
stop("invalid state")}
if(!outcome%in% c("heart attack",
"heart failure",
"pneumonia")){stop("invalid outcome")}
if(outcome=="heart attck"){
df <- df[,c(2,7,11)]
}else if(outcome=="heart failure"){
df <- df[,c(2,7,17)]
}else{
df <- df[,c(2,7,23)]}
df <- df[!is.na(df[,3]),]
df <- df[df[,2]==State,]
df <- df[order(df[,3],df[,1]),]
df[1,1]
}
